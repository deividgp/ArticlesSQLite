@page "/documenteditor"
@using ArticlesSQLite.Data
@using Telerik.Blazor.Components.Editor
@inject FileConverter fileConverter

<h3>DocumentEditor</h3>

<TelerikEditor @bind-Value="@EditorContent" Tools="@Tools" EditMode="@EditorEditMode.Div" Height="800px">
    <EditorCustomTools>
        <EditorCustomTool Name="ExportToPdfTool">
            <div style="margin-right: 50px">
                <TelerikButton OnClick="@ExportToPdf" Icon="download"></TelerikButton>
                <TelerikDropDownList Data="@SupportedExportFormats" @bind-Value="@exportFormat" PopupHeight="auto" Width="auto"></TelerikDropDownList>
            </div>
        </EditorCustomTool>
        <EditorCustomTool Name="MergeTool">
            <div style="margin-right: 50px">
                <TelerikButton OnClick="@Merge" Icon="download"></TelerikButton>
            </div>
        </EditorCustomTool>
    </EditorCustomTools>
</TelerikEditor>

<div class="notification-container">
    <TelerikAnimationContainer @ref="@FailureNotification" Width="300px" Height="200px" Top="20px" AnimationType=@AnimationType.SlideDown>
        <div class="k-widget k-popup k-notification k-notification-info">
            <h3><TelerikIcon Icon="cancel" /> Problem</h3>
            <p>
                The operation failed, there is probably something in the content that prevents the conversion. Try simplifying the content and removing images/lists.
            </p>
        </div>
    </TelerikAnimationContainer>
</div>

@code{
    string EditorContent { get; set; }
    List<IEditorTool> Tools { get; set; }

    string exportFormat { get; set; } = "pdf";
    List<string> SupportedExportFormats { get; set; } = new List<string> { "pdf", "docx", "txt", "html", "rtf" };

    public TelerikAnimationContainer FailureNotification { get; set; }

    protected override void OnInitialized()
    {
        // add the custom tool for export
        Tools = new List<IEditorTool>(EditorToolSets.All);
        Tools.Insert(0, new CustomTool("ExportToPdfTool"));
        Tools.Insert(1, new CustomTool("MergeTool"));
        // fetch the HTML content from import service
        EditorContent = fileConverter.GetHtmlString();
    }

    async Task ExportToPdf()
    {
        // call the export service, it will discern the details based on the extension of the exported file we want
        bool isSuccess = await fileConverter.ExportAndDownloadHtmlContent(EditorContent, $"EditoContent.{exportFormat}");
        // in case here was an issue
        if(isSuccess == false)
        {
            await ShowErrorNotification();
        }
    }

    async Task Merge()
    {
        await fileConverter.ExportMailMerge(EditorContent);
    }



    // these are for the issue notification only
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && EditorContent == null) // denotes an exception in this sample service
        {
            await ShowErrorNotification();
        }
    }

    async Task ShowErrorNotification()
    {
        await FailureNotification.ShowAsync();

        await Task.Delay(5000);

        await FailureNotification.HideAsync();
    }
}