@page "/families"
@using Microsoft.EntityFrameworkCore
<h3>LlistaFamilies</h3>

@if (showAlert)
{
    <Alert Style="Alert.AlertStyle.Warning">
        <ChildContent>
        No es pot eliminar
        </ChildContent>
    </Alert>
}

@if(showModal){
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <FormFamilies @bind-showModal="@showModal" codi="@codi" OnSubmit="readList"></FormFamilies>
            </div>
        </div>
        </div>
    </div>
}

<a @onclick="crear" class="btn btn-success">Crear</a>
<table class="table table-responsive table-striped">
    <thead>
        <tr>
            <th scope="col">CodiFamilia</th>
            <th scope="col">Descripció</th>
            <th scope="col">Opcions</th>
        </tr>
    </thead>
    <tbody>
        @if (families != null)
        {
            foreach (var familia in families)
            {
                <tr>
                    <th scope="row">@familia.CodiFamilia</th>
                    <td>@familia.Descripcio</td>
                    <td>
                        <a @onclick="() => editar(familia.CodiFamilia)" class="btn btn-warning">Editar</a>
                        <button class="btn btn-danger" @onclick="() => eliminar(familia)">Eliminar</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
<nav>
  <ul class="pagination">
    <li class="page-item"><a class="page-link" @onclick="@(() => savePageNumber(pageNumber-1))">Anterior</a></li>
    @for(int i = 1; i<= @max ; i++) {
        var p = i;
        <li class="page-item"><a class="page-link" @onclick="@(() => savePageNumber(p))">@i</a></li>
    }
    <li class="page-item"><a class="page-link" @onclick="@(() => savePageNumber(pageNumber+1))">Següent</a></li>
  </ul>
</nav>

@code {
    [Inject] ArticlesDbContext ArticlesDbContext { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    private IEnumerable<Familia> families;
    private int pageSize = 15;
    private int max;
    private int pageNumber = 1;
    private int count;
    private bool showAlert = false;
    public bool showModal { get; set; } = false;
    public string codi { get; set; }

    protected override async Task OnInitializedAsync()
    {
        count = ArticlesDbContext.Families.Count();
        max = Convert.ToInt32(Math.Ceiling(count / Convert.ToDecimal(pageSize)));
        await readList();
    }

    async Task savePageNumber(int p)
    {
        if (p >= 1 && p <= max)
        {
            pageNumber = p;
            await readList();
        }
    }

    async Task eliminar(Familia familiaElim)
    {
        if (ArticlesDbContext.Articles.FirstOrDefault(a => a.CodiFamilia == familiaElim.CodiFamilia) != null)
        {
            showAlert = true;
            return;
        }
        showAlert = false;

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Vols eliminar la familia d'articles '{familiaElim.Descripcio}'?"))
            return;

        ArticlesDbContext.Families.Remove(familiaElim);
        await ArticlesDbContext.SaveChangesAsync();
        count--;
        max = Convert.ToInt32(Math.Ceiling(count / Convert.ToDecimal(pageSize)));
        await readList();
    }

    async Task crear()
    {
        codi = "";
        showModal = true;
        await readList();
    }

    async Task editar(string codiFam)
    {
        codi = codiFam;
        showModal = true;
        await readList();
    }

    async Task readList()
    {
        families = await ArticlesDbContext.Families.OrderBy(f => f.CodiFamilia).Skip((pageNumber-1) * pageSize).Take(pageSize).ToListAsync();
        StateHasChanged();
    }
}
